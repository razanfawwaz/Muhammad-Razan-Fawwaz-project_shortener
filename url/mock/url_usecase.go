// Code generated by MockGen. DO NOT EDIT.
// Source: ./url/usecase/url_usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"
	domain "urlshortener/domain"

	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// DeleteUrl mocks base method.
func (m *MockUseCase) DeleteUrl(short string, id int, url domain.Url) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUrl", short, id, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUrl indicates an expected call of DeleteUrl.
func (mr *MockUseCaseMockRecorder) DeleteUrl(short, id, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUrl", reflect.TypeOf((*MockUseCase)(nil).DeleteUrl), short, id, url)
}

// ExpiredUrl mocks base method.
func (m *MockUseCase) ExpiredUrl(short string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpiredUrl", short)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpiredUrl indicates an expected call of ExpiredUrl.
func (mr *MockUseCaseMockRecorder) ExpiredUrl(short interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpiredUrl", reflect.TypeOf((*MockUseCase)(nil).ExpiredUrl), short)
}

// FindUrl mocks base method.
func (m *MockUseCase) FindUrl(short string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUrl", short)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUrl indicates an expected call of FindUrl.
func (mr *MockUseCaseMockRecorder) FindUrl(short interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUrl", reflect.TypeOf((*MockUseCase)(nil).FindUrl), short)
}

// GenerateUrl mocks base method.
func (m *MockUseCase) GenerateUrl(url domain.Url) (domain.Url, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateUrl", url)
	ret0, _ := ret[0].(domain.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateUrl indicates an expected call of GenerateUrl.
func (mr *MockUseCaseMockRecorder) GenerateUrl(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateUrl", reflect.TypeOf((*MockUseCase)(nil).GenerateUrl), url)
}

// GetAllUrl mocks base method.
func (m *MockUseCase) GetAllUrl() ([]domain.Url, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUrl")
	ret0, _ := ret[0].([]domain.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUrl indicates an expected call of GetAllUrl.
func (mr *MockUseCaseMockRecorder) GetAllUrl() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUrl", reflect.TypeOf((*MockUseCase)(nil).GetAllUrl))
}

// SubsStatus mocks base method.
func (m *MockUseCase) SubsStatus(id int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubsStatus", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubsStatus indicates an expected call of SubsStatus.
func (mr *MockUseCaseMockRecorder) SubsStatus(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubsStatus", reflect.TypeOf((*MockUseCase)(nil).SubsStatus), id)
}

// UpdateUrl mocks base method.
func (m *MockUseCase) UpdateUrl(short string, id int, url domain.Url) (domain.Url, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUrl", short, id, url)
	ret0, _ := ret[0].(domain.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUrl indicates an expected call of UpdateUrl.
func (mr *MockUseCaseMockRecorder) UpdateUrl(short, id, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUrl", reflect.TypeOf((*MockUseCase)(nil).UpdateUrl), short, id, url)
}

// UserUrl mocks base method.
func (m *MockUseCase) UserUrl(id int) ([]domain.Url, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserUrl", id)
	ret0, _ := ret[0].([]domain.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserUrl indicates an expected call of UserUrl.
func (mr *MockUseCaseMockRecorder) UserUrl(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserUrl", reflect.TypeOf((*MockUseCase)(nil).UserUrl), id)
}
