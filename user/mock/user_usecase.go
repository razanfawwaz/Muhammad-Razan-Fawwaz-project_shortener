// Code generated by MockGen. DO NOT EDIT.
// Source: ./user/usecase/user_usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"
	domain "urlshortener/domain"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
)

// MockUserUsecase is a mock of UserUsecase interface.
type MockUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUsecaseMockRecorder
}

// MockUserUsecaseMockRecorder is the mock recorder for MockUserUsecase.
type MockUserUsecaseMockRecorder struct {
	mock *MockUserUsecase
}

// NewMockUserUsecase creates a new mock instance.
func NewMockUserUsecase(ctrl *gomock.Controller) *MockUserUsecase {
	mock := &MockUserUsecase{ctrl: ctrl}
	mock.recorder = &MockUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUsecase) EXPECT() *MockUserUsecaseMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockUserUsecase) Auth(user domain.User) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", user)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Auth indicates an expected call of Auth.
func (mr *MockUserUsecaseMockRecorder) Auth(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockUserUsecase)(nil).Auth), user)
}

// Create mocks base method.
func (m *MockUserUsecase) Create(user *domain.User, ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user, ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserUsecaseMockRecorder) Create(user, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserUsecase)(nil).Create), user, ctx)
}
